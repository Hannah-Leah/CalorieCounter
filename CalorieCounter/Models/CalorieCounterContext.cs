// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CalorieCounter.Models;

public partial class CalorieCounterContext : DbContext
{
    public CalorieCounterContext()
    {
    }

    public CalorieCounterContext(DbContextOptions<CalorieCounterContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Activity> Activities { get; set; }

    public virtual DbSet<ActivityIntensity> ActivityIntensities { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Food> Foods { get; set; }

    public virtual DbSet<FoodFoodCategory> FoodFoodCategories { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=HannahLeah;Initial Catalog=CalorieCounter;Integrated Security=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Activity>(entity =>
        {
            entity.HasKey(e => e.ActivityPk);

            entity.ToTable("Activity");

            entity.Property(e => e.ActivityPk).HasColumnName("ActivityPK");
            entity.Property(e => e.ActivityTitle)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IntensityFk).HasColumnName("IntensityFK");

            entity.HasOne(d => d.IntensityFkNavigation).WithMany(p => p.Activities)
                .HasForeignKey(d => d.IntensityFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Activity_ActivityIntensity");
        });

        modelBuilder.Entity<ActivityIntensity>(entity =>
        {
            entity.HasKey(e => e.IntensityPk);

            entity.ToTable("ActivityIntensity");

            entity.Property(e => e.IntensityPk).HasColumnName("IntensityPK");
            entity.Property(e => e.IntensityLevel)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.FoodCategoryId);

            entity.ToTable("Category");

            entity.Property(e => e.FoodCategoryId).HasColumnName("FoodCategoryID");
            entity.Property(e => e.CategoryTitle)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Food>(entity =>
        {
            entity.ToTable("Food");

            entity.Property(e => e.FoodId).HasColumnName("FoodID");
            entity.Property(e => e.Image)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FoodFoodCategory>(entity =>
        {
            entity.HasKey(e => new { e.FoodId, e.FoodCategoryId });

            entity.ToTable("Food_FoodCategory");

            entity.Property(e => e.FoodId).HasColumnName("FoodID");
            entity.Property(e => e.FoodCategoryId).HasColumnName("FoodCategoryID");

            entity.HasOne(d => d.FoodCategory).WithMany(p => p.FoodFoodCategories)
                .HasForeignKey(d => d.FoodCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FoodCategory_Food");

            entity.HasOne(d => d.Food).WithMany(p => p.FoodFoodCategories)
                .HasForeignKey(d => d.FoodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Food_FoodCategory");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}